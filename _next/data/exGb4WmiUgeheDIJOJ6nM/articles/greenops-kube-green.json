{"pageProps":{"data":{"article":{"title":"Using Greenops to improve your operational efficiency and save the planet","date":"2024-06-26"},"children":"<p><a href=\"https://www.infoq.com/articles/greenops-operational-efficiency/\">Published by InfoQ</a></p>\n<p>Paraphrasing the words of a wise Uncle Ben (from the 2002 movie Spiderman): \"With great infrastructures come great responsibilities\" and these responsibilities are not only towards the end users of our systems but also towards the environment surrounding us.</p>\n<p>The information and communication technology sector alone produces around <a href=\"https://www.ericsson.com/en/reports-and-papers/industrylab/reports/a-quick-guide-to-your-digital-carbon-footprint\">1.4% of overall global emissions</a>. This equates to an estimated <a href=\"https://www.bbc.com/future/article/20200305-why-your-internet-habits-are-not-as-clean-as-you-think#:~:text=If%20we%20were%20to%20rather,of%20carbon%20dioxide%20a%20year.\">1.6 billion tons of greenhouse gas emissions</a>, making each one of us internet users responsible for about <a href=\"https://www.bbc.com/future/article/20200305-why-your-internet-habits-are-not-as-clean-as-you-think#:~:text=If%20we%20were%20to%20rather,of%20carbon%20dioxide%20a%20year.\">400kg of carbon dioxide a year</a>.</p>\n<h3>Understand the environmental impact of our systems</h3>\n<p>Creating environmentally friendly software involves using data to design programs that produce as little carbon emissions as possible. This requires knowledge from different fields like climate science, computer programming, and how electricity works.</p>\n<p>When we talk about \"carbon,\" we mean all the stuff that contributes to global warming. To measure this, we use terms like CO2eq, which tells us how much carbon dioxide is released and carbon intensity measures how much carbon is released for each unit of electricity used.</p>\n<p>To figure out how much carbon a software program produces, we need to gather data on how much energy it uses, how dirty that energy is, and what kind of computer it runs on. This can be tricky, even for big companies tracking their own software usage.</p>\n<p>To make software greener, we can focus on three things: making it use less energy, raising awareness about carbon emissions, and using more efficient hardware.</p>\n<p>To reduce carbon emissions without reducing the actual energy usage of our infrastructure, accessing data on the carbon intensity of data centers is necessary. This allows us to set up a <a href=\"https://learn.greensoftware.foundation/carbon-awareness/#spatial-shifting\">spatial</a> or <a href=\"https://learn.greensoftware.foundation/carbon-awareness/#temporal-shifting\">temporal</a> shifting strategy, thereby prioritizing the use of renewable energy sources where available.</p>\n<p>Since putting these strategies into action involves optimizing the workloads that use our infrastructure, and considering that upgrading to more efficient hardware can be expensive and challenging, the easiest and fastest way to enhance our environmental impact is by reducing energy consumption. But how can we achieve this without compromising the availability of our systems?</p>\n<h3>Zombies are real, and they are just around the corner</h3>\n<p>In simplest terms, the software lifecycle typically involves at least 4 phases: a design phase where the system is conceptualized and experiments may be conducted, a development phase where all features to be implemented are built, and a release phase to put the developed software into production, but not before testing everything in a secure environment.</p>\n<p>To implement a workflow as described, we'll need at least three different environments: the first being a development environment that will be useful for both the design and implementation phases, a staging or pre-production environment to test our software before delivering it to end users, and finally the production environment.</p>\n<p><img src=\"/blog//green-ops-kube-green/green-ops-kube-green-1.webp\" alt=\"\"></p>\n<p>These three environments have different availability requirements: the development and pre-production environments will be useful to engineers only during working hours, while the production environment needs to be constantly up and running. Additionally, transitioning from one environment to another often leaves behind remnants that linger in our infrastructure like zombies, consuming resources without serving a useful purpose in the overall software lifecycle.</p>\n<h3>Kill them all and save the planet</h3>\n<p>Suppose we hypothetically set an ideal case where all environments have the same number of pods running on the same infrastructure with a consistent and overlapping computational demand. We can assert that by keeping the development and staging environments constantly active even outside working hours, we're using more resources than necessary for 128 out of the total 168 hours in a week, which equates to approximately 103% more usage than what is actually required. In other words, by keeping the development and staging environments always active, engineers would effectively utilize them for only about 23% of their actual consumption.</p>\n<p>With this simple example, it is evident how significant the amount of resources that engineering companies waste every day is. Fortunately, remedying this requires nothing more than a handful of configuration lines and the installation of a Kubernetes operator on our clusters. <a href=\"https://github.com/kube-green/kube-green\">kube-green</a> is an add-on for Kubernetes that, once installed, allows you to automatically shut down Kubernetes resources when they are not needed and restart them when they are, all in an automated manner simply by configuring the CRD SleepInfo.</p>\n<pre><code class=\"language-yaml\">apiVersion: kube-green.com/v1alpha1\nkind: SleepInfo\nmetadata:\n\tname: working-hours\nspec:\n\tweekdays: \"1-5\"\n\tsleepAt: \"20:00\"\n\twakeUpAt: \"08:00\"\n\ttimeZone: \"Europe/Rome\"\n\tsuspendCronJobs: true\n\texcludeRef:\n          - apiVersion: \"apps/v1\"\n            kind:       Deployment\n            name:       my-deployment\n</code></pre>\n<p>With just a few lines of configuration like those in the previous image, you can define that all namespaces on the cluster with Kube-green are available only from Monday to Friday and only during the hours from 8 AM to 8 PM in the Rome timezone.</p>\n<p>With the current Kube-green version, both Deployments and CronJobs can be managed, but with the <a href=\"https://github.com/kube-green/kube-green/releases/tag/v0.6.0-rc.1\">next version</a> all the Kubernetes resources will be supported.</p>\n<p>In the case of Deployments, to stop the resource, the ReplicaSet is set to zero and then reset to its previous value to restart it. Conversely, to suspend CronJobs, they are marked as suspended.</p>\n<p>In the SleepInfo configurations, you can also specify resources that should not be suspended, such as the \"my-deployment\" in the example configuration provided above.</p>\n<h3>Data not just words: a real-world kube-green usage report</h3>\n<p>The following configuration of kube-green was used to suspend 48 out of 75 namespaces outside of working hours while keeping all deployments with the name api-gateway active.</p>\n<pre><code class=\"language-yaml\">apiVersion: kube-green.com/v1alpha1\nkind: SleepInfo\nmetadata:\n\tname: working-hours\nspec: \n\tweekdays: \"1-5\"\n\tsleepAt: \"20:00\"\n\twakeUpAt: \"08:00\"\n\ttimeZone: \"Europe/Rome\"\n\tsuspendCronJobs: true\n\texcludeRef:\n         - apiVersion: \"apps/v1\"\n           kind:       Deployment\n           name:       api-gateway\n</code></pre>\n<p>A cluster of this size, operating without kube-green, manages an average of 1050 pods with an allocated amount of resources equal to 75 GB of memory and 45 CPUs. In terms of actual resource consumption, the cluster records usage of 45 GB of memory and 4.5 CPUs, emitting approximately 222 kg of CO2 into the environment per week.</p>\n<p>By configuring SleepInfo on this cluster, we can reduce the total number of pods by 600, bringing it down to 450. The allocated memory decreases to 30 GB, and the CPUs decrease to only 15. With kube-green, there is also a decrease in terms of resource consumption, with memory usage reduced to 21 GB and CPUs reduced to 1, resulting in emissions of approximately 139 kg of CO2.</p>\n<p>|                       | without kube-green | with kube-green | difference |\n| :-------------------- | :----------------- | :-------------: | ---------: |\n| number of pods        | 1050               |       450       |        600 |\n| memory consumed [Gb]  | 54                 |       21        |         33 |\n| CPU consumed [cpu]    | 4.5                |        1        |        3.5 |\n| memory allocated [Gb] | 75                 |       30        |         45 |\n| CPU allocated [cpu]   | 40                 |       15        |         25 |\n| CO2eq/week [kg]       | 222                |       139       |         83 |</p>\n<p>The use of kube-green on this cluster during the study week resulted in emitting approximately 83 kg of CO2eq into the environment, which is 38% less than what we would have emitted under normal circumstances. These numbers become even more impressive when projected over the entire year, resulting in approximately 4000 kg less CO2eq emitted thanks to the simple use of kube-green.</p>\n<p>To put it into perspective, this reduction is <a href=\"https://www.epa.gov/greenvehicles/greenhouse-gas-emissions-typical-passenger-vehicle\">equivalent to the carbon emissions from an average car</a> traveling approximately 16,000 km.</p>\n<p><img src=\"/blog//green-ops-kube-green/green-ops-kube-green-2.webp\" alt=\"\"></p>\n<p><img src=\"/blog//green-ops-kube-green/green-ops-kube-green-3.webp\" alt=\"\"></p>\n<p><img src=\"/blog//green-ops-kube-green/green-ops-kube-green-4.webp\" alt=\"\"></p>\n<p><img src=\"/blog//green-ops-kube-green/green-ops-kube-green-5.webp\" alt=\"\"></p>\n<p>In this specific use case, as evidenced by the snapshots of resource usage metrics, the use of kube-green has allowed for a significant decrease in resource utilization, enabling the downscaling of the number of nodes in the cluster. On average, 4 nodes are stopped during the night and on weekends, each of which has a size of 2 CPU cores and 8 GB of memory.</p>\n<p>This brings several benefits, not only reducing CO2 emissions but also directly proportional cost savings for our cluster. This is because the pricing structure of clusters in major cloud providers is typically based on the number of nodes used. By scaling down the number of nodes when they are not needed, we effectively reduce the cost of operating the cluster.</p>\n<h3>The future of kube-green</h3>\n<p>The kube-green project is constantly evolving, and as mentioned earlier, we are already working on improvements that will make kube-green a better tool, hopefully making the world a better place as well.</p>\n<p>In the next release of kube-green, all resources available in Kubernetes will be supported. Instead of directly acting on specific resources, it will be possible to define rules to schedule the shutdown and possibly the startup of any resource at defined times.</p>\n<p>With these patches, kube-green's support won't be limited to just Deployments and CronJobs but will also extend to ReplicaSets, Pods, StatefulSets, and any other custom CRDs.</p>\n<pre><code class=\"language-yml\">apiVersion: kube-green.com/v1alpha1\nkind: SleepInfo\nmetadata:\n\tname: working-hours\nspec:\n\tweekdays: \"*\"\n\tsleepAt: \"20:00\"\n\twakeUpAt: \"08:00\"\n\tsuspendCronJobs: true\n\tpatches:\n        - target:\n             group: apps\n             kind: StatefulSet\n          patch:  \n            - path: /spec/replicas\n              op: add\n              value: 0\n       - target:\n            group: apps\n            kind: ReplicaSet\n         patch:\n           - path: /spec/replicas\n             op: add\n             value: 0\n\texcludeRef:\n        - apiVersion: \"apps/v1\"\n          kind:       StatefulSet\n          name:       do-not-sleep\n        - matchLabels:\n            kube-green.dev/exclude: \"true\"\n</code></pre>\n<p>We are experimenting with solutions that would allow kube-green to interact with other operators like <a href=\"https://www.crossplane.io/\">Crossplane</a>. This would enable scheduling the shutdown and restart of entire pieces of infrastructure managed through this tool.</p>\n<p>Anyone who wants to share their thoughts or contribute directly to the project with ideas, code, or content can take a look at the <a href=\"https://github.com/kube-green/kube-green\">repository on GitHub</a> or contact us directly.</p>\n<h3>Use your resources consciously: keep what you need when you need it</h3>\n<p>These days, our easy access to resources has made us a bit less mindful of how we use them. An unused pod isn't just an unused pod; in the long run, it has a significant impact on our overall carbon footprint.</p>\n<p>GreenOps allows us to have a significant positive impact on the environment with a negligible impact on our architectures. With minimal additional effort, we can ensure that our clusters use resources much more efficiently and without waste.</p>\n<p>With modern approaches, we can implement our GreenOps strategy without drastically altering the management of our workloads, while also achieving positive impacts on our infrastructure costs. GreenOps and FinOps are extremely related concepts, and often, rationalizing our resources from a sustainability perspective leads to savings on our cloud bills.</p>\n<p>To make informed decisions, it is essential to have visibility into both the costs of our clusters and their CO2eq emissions into the environment. For this reason, many cost monitoring tools, such as <a href=\"https://www.opencost.io/\">OpenCost</a>, have introduced carbon cost emissions tracking across Kubernetes and cloud spending.</p>\n<p>In conclusion, GreenOps can be the first step in aligning our operational practices with environmental sustainability before implementing more complex strategies aimed at using more efficient hardware or preferring renewable energy sources. With GreenOps techniques, you can improve your environmental impact from day one and see immediate results. This allows you to collect data and move more consciously in the vast world of eco-friendly software.</p>\n","pageTitle":"Using Greenops to improve your operational efficiency and save the planet - by Graziano Casto","pageDescription":"Using Greenops to improve your operational efficiency and save the planet - by Graziano Casto","pageLink":"https://castograziano.com/articles/greenops-kube-green","pageImage":"https://castograziano.com/casto_graziano_personal_website.png"},"schema":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Using Greenops to improve your operational efficiency and save the planet","datePublished":"2024-06-26T00:00:00.000Z","dateModified":"2024-06-26T00:00:00.000Z","author":[{"@type":"Person","name":"Graziano Casto","url":"https://castograziano.com/about-me"}]}},"__N_SSG":true}