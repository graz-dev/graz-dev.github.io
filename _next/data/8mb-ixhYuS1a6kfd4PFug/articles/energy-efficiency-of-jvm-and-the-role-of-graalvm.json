{"pageProps":{"data":{"article":{"title":"The energy efficiency of JVMs and the role of GraalVM","date":"2025-01-29"},"children":"<p><a href=\"https://dzone.com/articles/energy-efficiency-jvms-role-graalvm\">Published by DZONE</a></p>\n<p>As the world becomes increasingly conscious of energy consumption and its environmental impact, software development is joining the movement to <strong>go green</strong>. Surprisingly, even the choice of runtime environments and how code is executed can affect energy consumption. This brings us to the world of Java Virtual Machines (JVMs), an integral part of running Java applications, and the rising star in the JVM world, GraalVM.</p>\n<p>In this article, we will explore how code performance and energy efficiency intersect in the JVM ecosystem and why GraalVM stands out in this domain.</p>\n<h3>Understanding energy and performance in the JVM context</h3>\n<p>To grasp why energy efficiency matters in JVMs, we first need to understand what JVMs do. A JVM is the engine that powers Java applications, converting platform-independent Java bytecode into machine-specific instructions. While this flexibility is a major strength, it also means JVMs carry some overhead, especially compared to compiled languages like C++.</p>\n<p>Now, energy consumption in software isn't just about the hardware running hotter or consuming more electricity. It's tied to the performance of the software itself. When code is slow or inefficient, it takes longer to execute, which directly correlates with more CPU cycles, increased power draw, and greater energy usage. This connection between performance and energy efficiency is at the heart of what makes optimizing JVMs so critical.</p>\n<p>Studies like those by Leeds Beckett University (2023) and HAL Open Science (2021) reveal how JVM optimizations and configurations significantly impact energy use. As newer JVMs improve performance through better garbage collection, just-in-time (JIT) compilation, and other optimizations, they reduce not just runtime but also energy costs. Yet, even within these advancements, there’s a standout contender reshaping how we think about energy-efficient Java: GraalVM.</p>\n<p><img src=\"../../assets/blog/energy-efficiency-of-jvm-and-the-role-of-graalvm/photo-1.png\" alt=\"\"></p>\n<h3>What makes GraalVM different?</h3>\n<p>GraalVM is a high-performance runtime designed to improve the efficiency of applications written in Java and other JVM-compatible languages. Unlike traditional JVM implementations, GraalVM incorporates advanced optimization techniques that make it unique in both speed and energy usage. Its native image capability allows applications to be compiled ahead-of-time (AOT) into standalone executables.</p>\n<p>Traditional JVMs rely heavily on JIT compilation, which compiles bytecode into machine code at runtime. While this approach allows for adaptive optimizations (learning and optimizing as the program runs), it introduces a delay in startup time and consumes energy during execution. GraalVM’s AOT compilation eliminates this runtime overhead by pre-compiling the code, significantly reducing the startup time and resource consumption.</p>\n<p>Furthermore, GraalVM supports polyglot programming, which enables developers to mix languages like JavaScript, Python, and Ruby in a single application. This reduces the need for multiple runtime environments, simplifying deployment and cutting down on the energy costs associated with maintaining diverse infrastructures.</p>\n<h3>Energy efficiency in numbers</h3>\n<p>The question many might ask is: does GraalVM truly make a difference in energy terms? The combined studies offer some clarity. For example, Leeds Beckett University (2023) and HAL Open Science (2021) benchmarked GraalVM against traditional JVMs like OpenJDK, Amazon Corretto, and Azul Zulu, using diverse workloads. Both studies showed that GraalVM, particularly in its native image configuration, consumed less energy and completed tasks faster across the majority of scenarios.</p>\n<p>Interestingly, the energy consumption gains are not linear across all benchmarks. While GraalVM excelled in data-parallel tasks like <strong>Alternating Least Squares (ALS)</strong>, it underperformed in certain highly parallel tasks like <strong>Avrora</strong>. This suggests that the workload type significantly influences the runtime's energy efficiency.</p>\n<p>Moreover, the researchers observed that while newer JVMs like HotSpot 15 generally offered better energy performance than older versions like HotSpot 8, GraalVM consistently stood out. Even when compared to JVMs optimized for long-running tasks, GraalVM delivered lower energy costs due to its AOT compilation, which minimized runtime overhead.</p>\n<p><img src=\"../../assets/blog/energy-efficiency-of-jvm-and-the-role-of-graalvm/photo-2.png\" alt=\"\"></p>\n<h3>Insights from JVM configuration studies</h3>\n<p>Beyond runtime optimizations, how you configure a JVM can have profound effects on energy consumption. Both studies emphasized the role of garbage collection (GC) and JIT compiler settings. For instance, HAL Open Science found that default GC settings were energy-efficient in only half of the experiments. Alternative GC strategies, such as ParallelGC and SerialGC, sometimes outperformed default configurations like G1GC. Similarly, tweaking JIT compilation levels could improve energy efficiency, but such adjustments often required detailed performance evaluations.</p>\n<p>One of the most striking observations was the variability in energy savings based on application characteristics. For data-heavy tasks like H2 database simulations, energy savings were most pronounced when using GraalVM’s default configurations. However, for highly concurrent applications like Reactors, specific configurations of JIT threads delivered significant improvements.</p>\n<h3>Carbon footprint reduction</h3>\n<p>The environmental implications of these energy savings are immense. Using standardized energy-to-carbon conversion factors, the studies highlighted that GraalVM reduced carbon dioxide emissions more effectively than traditional JVMs. These reductions were particularly significant in cloud environments, where optimizing runtime efficiency lowered operational costs and reduced the carbon footprint of large-scale deployments.</p>\n<p><img src=\"../../assets/blog/energy-efficiency-of-jvm-and-the-role-of-graalvm/photo-3.png\" alt=\"\"></p>\n<h3>Broader implications for software development</h3>\n<p>The findings from Leeds Beckett University (2023) and HAL Open Science (2021) are clear: energy efficiency is no longer just about hardware; it’s about making smarter software choices. By adopting greener JVMs like GraalVM, developers can contribute directly to sustainability goals without compromising on performance.</p>\n<p>However, the road to greener software isn’t just about choosing a runtime. It involves understanding the nuances of workload types, runtime configurations, and application behaviors. Tools like <a href=\"https://github.com/chakib-belgaid/jreferral\">J-Referral</a>, introduced in HAL Open Science’s study, can help developers select the most energy-efficient JVM configurations for their specific needs, simplifying the path to sustainable computing.</p>\n<h3>Conclusion</h3>\n<p>The correlation between code performance and energy efficiency is clear: faster, optimized software consumes less energy. JVMs have long been at the heart of this discussion, and while traditional JVMs continue to evolve, GraalVM offers a leap forward. By combining high performance, energy efficiency, and versatility, it stands out as a powerful tool for modern developers looking to build applications that are not only fast but also environmentally conscious.</p>\n<p>With studies confirming its efficiency across a broad range of scenarios, GraalVM represents a shift in how we think about software sustainability. The journey to greener software begins with choices like these — choices that balance performance, cost, and environmental responsibility.</p>\n<h3>References</h3>\n<ol>\n<li>Vergilio, TG and Do Ha, L and Kor, A-LG (2023) <a href=\"https://core.ac.uk/download/590241573.pdf\">Comparative Performance and Energy Efficiency Analysis of JVM Variants and GraalVM in Java Applications</a>.</li>\n<li>Zakaria Ournani, Mohammed Chakib Belgaid, Romain Rouvoy, Pierre Rust, Joel Penhoat. <a href=\"https://inria.hal.science/hal-03275286v1/\">Evaluating the Impact of Java Virtual Machines on Energy Consumption</a>.</li>\n</ol>\n","pageTitle":"The energy efficiency of JVMs and the role of GraalVM - by Graziano Casto","pageDescription":"The energy efficiency of JVMs and the role of GraalVM - by Graziano Casto","pageLink":"https://castograziano.com/articles/energy-efficiency-of-jvm-and-the-role-of-graalvm","pageImage":"https://castograziano.com/casto_graziano_personal_website.png"},"schema":{"@context":"https://schema.org","@type":"BlogPosting","headline":"The energy efficiency of JVMs and the role of GraalVM","datePublished":"2025-01-29T00:00:00.000Z","dateModified":"2025-01-29T00:00:00.000Z","author":[{"@type":"Person","name":"Graziano Casto","url":"https://castograziano.com/about-me"}]}},"__N_SSG":true}